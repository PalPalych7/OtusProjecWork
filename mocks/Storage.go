// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	sqlstorage "github.com/PalPalych7/OtusProjectWork/internal/sqlstorage"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// AddBannerSlot provides a mock function with given fields: slotID, bannerID
func (_m *Storage) AddBannerSlot(slotID int, bannerID int) error {
	ret := _m.Called(slotID, bannerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(slotID, bannerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BannerClick provides a mock function with given fields: slotID, bannerID, socGroupID
func (_m *Storage) BannerClick(slotID int, bannerID int, socGroupID int) error {
	ret := _m.Called(slotID, bannerID, socGroupID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, int) error); ok {
		r0 = rf(slotID, bannerID, socGroupID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ChangeSendStatID provides a mock function with given fields: ID
func (_m *Storage) ChangeSendStatID(ID int) error {
	ret := _m.Called(ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Close provides a mock function with given fields:
func (_m *Storage) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Connect provides a mock function with given fields:
func (_m *Storage) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelBannerSlot provides a mock function with given fields: slotID, bannerID
func (_m *Storage) DelBannerSlot(slotID int, bannerID int) error {
	ret := _m.Called(slotID, bannerID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int) error); ok {
		r0 = rf(slotID, bannerID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBannerForSlot provides a mock function with given fields: slotID, socGroupID
func (_m *Storage) GetBannerForSlot(slotID int, socGroupID int) (int, error) {
	ret := _m.Called(slotID, socGroupID)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(slotID, socGroupID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(slotID, socGroupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBannerStat provides a mock function with given fields:
func (_m *Storage) GetBannerStat() ([]sqlstorage.BannerStatStruct, error) {
	ret := _m.Called()

	var r0 []sqlstorage.BannerStatStruct
	if rf, ok := ret.Get(0).(func() []sqlstorage.BannerStatStruct); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]sqlstorage.BannerStatStruct)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStorage interface {
	mock.TestingT
	Cleanup(func())
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStorage(t mockConstructorTestingTNewStorage) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
